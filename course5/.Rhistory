par(mar = c(2, 2, 1, 1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow = c(1, 2))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mar = c(4, 4, 2, 2))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow = c(2, 2))
plot(x, y)
plot(x, z)
plot(z, x)
plot(y, x)
par(mfcol = c(2, 2))
plot(x, y)
plot(x, z)
plot(z, x)
plot(y, x)
par(mfrow = c(1, 1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
?gl
g <- gl(2, 50, labels = c("Male", "Female"))
str(g)
plot(x, y)
plot(x, y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
points(x[g == "Female"], y[g == "Female"], col = "blue", pch = 19)
library(swirl)
swirl()
head(caras)
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5, 1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[[:x.limits]]
p[[x.limits]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2, 1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?name <- function(variables) {
}
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0,3))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
shoMe(cols)
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes("displ", "hwy"))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(col = "pink", size = 4, alpha = 1/2)
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(03, 3))
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = displ, y = hwy, color = factor(year)))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
library(swirl)
swirl()
bye()
library(swirl)
delete_progress("anthonylst6", path = NULL)
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, bindwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut())
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth = (method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
ccutpoints
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3)+ facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3)+ facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?cyplot
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data - airquality, facets = . ~ Month)
str(airquality)
airquality$Month
qplot(Wind, Ozone, data - airquality, facets = . ~ Month)
?llines
?points
?text
par(mar = c(0, 0, 0, 0))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
dev.off()
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )}
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
graY(0.5)
gray(0.5)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0, 1, len = 10))
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
x <- rnorm(1000)
y <- rnorm(1000)
plot(x, y, pch = 19)
plot(x, y, col = rgb(0, 0, 0, 0.2), pch = 19)
library(swirl)
swirl()
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dimensions(sub1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[, 1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
mdist
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v[, 2])
mdist <- dist(sub1[, c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1)
)
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(0.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
library(ggplot2)
library(dplyr)
setwd("C:/Users/user/Desktop/datasciencecoursera/course5")
# Loading and preprocessing the data
data <- read.csv("activity.csv", header = TRUE)
# What is mean total number of steps taken per day?
data1 <- data %>%
group_by(date) %>%
summarise(steps_total = sum(steps, na.rm = TRUE))
ggplot(data1, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (excluding missing values)")
mean(data1$steps_total)
median(data1$steps_total)
# What is the average daily activity pattern?
data2 <- data %>%
group_by(interval) %>%
summarise(steps_avg = mean(steps, na.rm = TRUE))
ggplot(data2, aes(interval, steps_avg)) + geom_line() + labs(x = "Interval", y = "Average steps in 5 minute interval")
data2$interval[which.max(data2$steps_avg)]
# Imputing missing values
sum(is.na(data$steps))
data3 <- data %>%
group_by(interval) %>%
mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps)) %>%
arrange(date)
data4 <- data3 %>%
group_by(date) %>%
summarise(steps_total = sum(steps))
ggplot(data4, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (with imputed missing values)")
mean(data4$steps_total)
median(data4$steps_total)
ggplot(data1, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (excluding missing values)")
View(data1)
# What is mean total number of steps taken per day?
data1 <- data %>%
group_by(date) %>%
summarise(steps_total = sum(steps))
ggplot(data1, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (excluding missing values)")
ggplot(data4, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (with imputed missing values)")
mean(data1$steps_total)
median(data1$steps_total)
mean(data1$steps_total, na.rm = TRUE)
median(data1$steps_total, na.rm = TRUE)
mean(data1$steps_total, na.rm = TRUE)
median(data1$steps_total, na.rm = TRUE)
mean(data4$steps_total)
median(data4$steps_total)
ggplot(data1, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (excluding missing values)")
ggplot(data4, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (with imputed missing values)")
ggplot(data1, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (excluding missing values)")
ggplot(data4, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (with imputed missing values)")
?weekdays
# Loading and preprocessing the data
data <- read.csv("activity.csv", header = TRUE)
# What is mean total number of steps taken per day?
data1 <- data %>%
group_by(date) %>%
summarise(steps_total = sum(steps))
ggplot(data1, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (excluding missing values)")
mean(data1$steps_total, na.rm = TRUE)
median(data1$steps_total, na.rm = TRUE)
# What is the average daily activity pattern?
data2 <- data %>%
group_by(interval) %>%
summarise(steps_avg = mean(steps, na.rm = TRUE))
ggplot(data2, aes(interval, steps_avg)) + geom_line() + labs(x = "Interval", y = "Average steps in 5 minute interval")
data2$interval[which.max(data2$steps_avg)]
# Imputing missing values
sum(is.na(data$steps))
data_imputed <- data %>%
group_by(interval) %>%
mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps)) %>%
arrange(date)
data3 <- data_imputed %>%
group_by(date) %>%
summarise(steps_total = sum(steps))
ggplot(data3, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Total steps in a day", y = "Frequency", title = "Frequency of total steps per day (with imputed missing values)")
mean(data3$steps_total)
median(data3$steps_total)
View(data3)
x <- weekdays(data3$date)
x <- as.Date(data3$date)
head(x)
View(data3)
x[25:30]
y <- weekdays(x)
head(y)
y[1:8]
?gsub
z <- gsub("^S", "weekend", y)
z[1:8]
z <- gsub("^S(.*)day", "weekend", y)
z[1:8]
m <- gsub("(.*)day", "weekday", z)
m[1:8]
c(rep("weekday", 5), rep("weekend", 2))
# Are there differences in activity patterns between weekdays and weekends?
data_imputed <= data_imputed %>%
mutate(day_type = c(rep("weekday", 5), rep("weekend", 2)))
# Are there differences in activity patterns between weekdays and weekends?
day_type = as.factor(c(rep("weekday", 5), rep("weekend", 2)))
# Are there differences in activity patterns between weekdays and weekends?
string <- as.factor(c(rep("weekday", 5), rep("weekend", 2)))
data_imputed$day_type <- string
data_imputed <- cbind(data_imputed, day_type)
# Are there differences in activity patterns between weekdays and weekends?
day_type = as.factor(c(rep("weekday", 5), rep("weekend", 2)))
# Are there differences in activity patterns between weekdays and weekends?
day <- weekdays(as.Date(data3$date))
day1 <- gsub("^S(.*)day", "weekend", day)
day2 <- gsub("(.*)day", "weekday", day1)
day2[1:8]
# Are there differences in activity patterns between weekdays and weekends?
day <- gsub("^S(.*)day", "weekend", weekdays(as.Date(data3$date)))
day <- as.factor(gsub("(.*)day", "weekday", day))
day[1:8]
data_imputed <= data_imputed %>%
mutate(day_type = day)
data_imputed <- data_imputed %>%
mutate(day_type = day)
View(data_imputed)
data4 <- data_imputed %>%
group_by(day_type, interval) %>%
summarise(steps_avg = mean(steps))
View(data4)
View(data2)
ggplot(data4, aes(interval, steps_avg)) + geom_line() + facet_wrap(day_type ~ .)
ggplot(data4, aes(interval, steps_avg)) + geom_line() + facet_wrap(. ~ day_type)
ggplot(data4, aes(interval, steps_avg)) + geom_line() + facet_wrap(. ~ day_type)
ggplot(data2, aes(interval, steps_avg)) + geom_line() + labs(x = "Interval", y = "Average steps in 5 minute interval")
ggplot(data4, aes(interval, steps_avg)) + geom_line() + facet_wrap(. ~ day_type)
ggplot(data4, aes(interval, steps_avg)) + geom_line() + facet_wrap(day_type ~ .)
ggplot(data4, aes(interval, steps_avg)) + geom_line() + facet_grid(day_type ~ .)
ggplot(data1, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Number of steps", y = "Frequency", title = "Frequency of total steps per day (excluding missing values)")
ggplot(data2, aes(interval, steps_avg)) + geom_line() + labs(x = "Interval", y = "Number of steps", title = "Average number of steps in 5 minute intervals (excluding missing values)")
ggplot(data3, aes(steps_total)) + geom_histogram(bins = 10) + labs(x = "Number of steps", y = "Frequency", title = "Frequency of total steps per day (with imputed missing values)")
ggplot(data4, aes(interval, steps_avg)) + geom_line() + facet_grid(day_type ~ .) + labs(x = "Interval", y = "Number of steps", title = "Average number of steps in 5 minute intervals (with imputed missing values")
ggplot(data4, aes(interval, steps_avg)) + geom_line() + facet_grid(day_type ~ .) + labs(x = "Interval", y = "Number of steps", title = "Average number of steps in 5 minute intervals (with imputed missing values)")
