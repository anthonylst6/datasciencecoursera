lm.fit31 <- lm(crim ~ age, data = Boston)
lm.fit32 <- lm(crim ~ dis, data = Boston)
lm.fit33 <- lm(crim ~ rad, data = Boston)
lm.fit34 <- lm(crim ~ tax, data = Boston)
lm.fit35 <- lm(crim ~ ptratio, data = Boston)
lm.fit36 <- lm(crim ~ black, data = Boston)
lm.fit37 <- lm(crim ~ lstat, data = Boston)
lm.fit38 <- lm(crim ~ medv, data = Boston)
coef(lm.fit26)
lm.fit26$coef
summary(lm.fit26)$coef
summary(lm.fit26)$coef
summary(lm.fit27)$coef
summary(lm.fit28)$coef
summary(lm.fit29)$coef
summary(lm.fit30)$coef
summary(lm.fit31)$coef
summary(lm.fit32)$coef
summary(lm.fit33)$coef
summary(lm.fit34)$coef
summary(lm.fit35)$coef
summary(lm.fit36)$coef
summary(lm.fit37)$coef
summary(lm.fit38)$coef
# All predictors except chas are statistically significant under simple linear regression
plot(Boston$crim, Boston$chas)
# All predictors except chas are statistically significant under simple linear regression
plot(Boston$chas, Boston$crim)
# All predictors except chas are statistically significant under simple linear regression
plot(Boston$zn, Boston$crim)
plot(Boston$indus, Boston$crim)
plot(Boston$chas, Boston$crim)
plot(Boston$nox, Boston$crim)
# All predictors except chas are statistically significant under simple linear regression
pairs(Boston)
plot(Boston$age, Boston$crim)
plot(Boston$dis, Boston$crim)
plot(Boston$rad, Boston$crim)
plot(Boston$tax, Boston$crim)
plot(Boston$ptratio, Boston$crim)
plot(Boston$black, Boston$crim)
plot(Boston$lstat, Boston$crim)
plot(Boston$medv, Boston$crim)
plot(lm.fit26)
par(mfrow = c(2, 2))
plot(lm.fit26)
plot(lm.fit26)
plot(lm.fit27)
plot(lm.fit28)
plot(lm.fit29)
plot(lm.fit30)
plot(lm.fit31)
plot(lm.fit32)
plot(lm.fit33)
plot(lm.fit34)
plot(lm.fit35)
plot(lm.fit36)
plot(lm.fit37)
plot(lm.fit38)
plot(lm.fit28)
lm.fit39 <- lm(crim ~ ., data = Boston)
summary(lm.fit39)
cor(Boston)
vif(lm.fit39)
library(cars)
library(Cars)
library(car)
vif(lm.fit39)
plot(0.1, 0.2)
mfrow = c(2, 2)
par(mfrow = c(1, 1))
size(Boston)
dim(Boston)
col(Boston)
dim(Boston)
ncol(Boston)
paste0("lm.fit", 2 + 1)
coef(lm.fit26)
coef(lm.fit26)[2]
coef("lm.fit26")
coef(get("lm.fit26"))
coef(get("lm.fit26"))[2]
coef(lm.fit39)
coef(lm.fit39)[2]
for(i in 1:(ncol(Boston) - 1)) {
name <- paste0("lm.fit", 25 + i)
coefx <- coef(get(name))[2]
coefy <- coef(lm.fit39)[i + 1]
plot(coefx, coefy)
}
name <- paste0("lm.fit", 25 + i)
for(i in 1:(ncol(Boston) - 1)) {
name <- paste0("lm.fit", 25 + i)
coefx <- coef(get(name))[2]
coefy <- coef(lm.fit39)[i + 1]
points(coefx, coefy)
}
coords <- numeric(0)
coords <- data.frame(x = numeric(0), y = numeric(0))
for(i in 1:(ncol(Boston) - 1)) {
name <- paste0("lm.fit", 25 + i)
coords$x[i] <- coef(get(name))[2]
coords$y[i] <- coef(lm.fit39)[i + 1]
}
coords
name <- paste0("lm.fit", 26)
coords$x[1] <- coef(get(name))[2]
coords$x[1] <- 1
m <- numeric(0)
m[1] <- 2
coefx = numeric(0)
coefy = numeric(0)
for(i in 1:(ncol(Boston) - 1)) {
name <- paste0("lm.fit", 25 + i)
coefx[i] <- coef(get(name))[2]
coefy[i] <- coef(lm.fit39)[i + 1]
}
plot(coefx, coefy)
str(Boston)
names(Bosotn)
names(Boston)
# Question 15d
names <- names(Boston)
summary(lm.fit39)$coef
# Question 15d
names <- names(Boston)[4]
coef(lm.fit)
coef(lm.fit39)
summary(lm.fit39)$coef[4]
summary(lm.fit39)$coef[1, 4]
# Question 15d
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("Coefficients for", var))
print(summary(model)$coef[i + 1, 4])
print("----------------")
}
clear("name")
rm("name")
rm("names")
# Question 15d
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("Coefficients for", var))
print(summary(model)$coef[i + 1, 4])
print("----------------")
}
var <- names(Boston)[1 + 1]
var <- names(Boston)[2 + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("p-value for", var))
# Question 15d
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("p-value for", var))
print(summary(model)$coef[i + 1, 4])
print("----------------")
}
var <- names(Boston)[1 + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
summary(model)
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
summary(model)
}
model$coefficients
summary(model)
rm("var")
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
summary(model)
}
names(Boston)
names(Boston)[1]
(length(names) - 1)
# Question 15d
for(i in 1:13) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("p-value for", var))
print(summary(model)$coef[i + 1, 2:4])
print("----------------")
}
for(i in 1:13) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
summary(model)
}
# Question 15d
lm.zn = lm(crim~poly(zn,3))
summary(lm.zn)
str(Boston)
# Question 15d
lm.zn = lm(crim ~ poly(zn, 3))
# Question 15d
attach(Boston)
lm.zn = lm(crim ~ poly(zn, 3))
lm.indus = lm(crim ~ poly(indus, 3))
lm.chas = lm(crim ~ poly(chas, 3))
lm.nox = lm(crim ~ poly(nox, 3))
lm.rm = lm(crim ~ poly(rm, 3))
lm.age = lm(crim ~ poly(age, 3))
lm.dis = lm(crim ~ poly(dis, 3))
lm.rad = lm(crim ~ poly(rad, 3))
lm.tax = lm(crim ~ poly(tax, 3))
lm.ptratio = lm(crim ~ poly(ptratio, 3))
lm.black = lm(crim ~ poly(black, 3))
lm.lstat = lm(crim ~ poly(lstat, 3))
lm.medv = lm(crim ~ poly(medv, 3))
summary(lm.zn)
summary(lm.zn)
summary(lm.indus)
summary(lm.chas)
summary(lm.nox)
summary(lm.rm)
summary(lm.age)
summary(lm.dis)
summary(lm.rad)
summary(lm.tax)
summary(lm.ptratio)
summary(lm.black)
summary(lm.lstat)
summary(lm.medv)
install.packages("installR")
install.packages("installr")
library(installr)
updateR()
shiny::runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp()
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp()
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
plot(M)
M
plot(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year")
plot(M)
M = gvisMotionChart(Fruits, idvar = "Fruit", timevar = "Date", chartid = "I_lovemy_fruit")
plot(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
plot(M)
plot(M)
print(M,"chart", file = "myfile")
pwd
printwd
getwd()
print(M,"chart")
plot(M)
setwd("C:/Users/user/Desktop/jhudatascience/course9/assignment1")
if(!file.exists("postcodes_1618.csv")) {
url <- "https://d284f79vx7w9nf.cloudfront.net/attachments/analysis/5/postcodes_1618.csv"
download.file(url, destfile = "postcodes_1618.csv")
}
if(!file.exists("australian_postcodes.csv")) {
url <- "https://www.matthewproctor.com/Content/postcodes/australian_postcodes.csv"
download.file(url, destfile = "australian_postcodes.csv")
}
# Load necessary libraries
library(leaflet)
library(dplyr)
# Read data into R
pv <- read.csv("postcodes_1618.csv")
post <- read.csv("australian_postcodes.csv")
# Preprocess data
pv <- pv %>%
select(postcode, instals) %>%
na.omit()
post <- post %>%
na.omit() %>%
filter((lat != 0) | (long != 0)) %>%
group_by(postcode) %>%
summarise(lng = mean(long), lat = mean(lat))
df <- merge(pv, post, by = 'postcode')
map <- leaflet() %>%
addTiles() %>%
addMarkers(lng = df$lng, lat = df$lat, clusterOptions = markerClusterOptions())
map
?addMarkers
View(df)
pi
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, radius = sqrt(df$instals) / pi)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, radius = sqrt(df$instals) / pi, clusterOptions = markerClusterOptions())
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, radius = sqrt(df$instals) / pi)
map
?addCircleMarkets
?addCircleMarkers
knitr::opts_chunk$set(echo = FALSE)
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat,
radius = sqrt(df$instals) / pi, weight = 1)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat,
radius = sqrt(df$instals) / pi, weight = 1)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat,
radius = sqrt(df$instals) / pi, weight = 1,
opacity = 0.4, fillOpacity = 0.1)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat,
radius = 10, weight = 1,
opacity = df$\, fillOpacity = df)
opacities <- df$instals / max(df$instals) / 100
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat,
radius = 10, weight = 1,
opacity = opacities, fillOpacity = opacities)
map
opacities <- df$instals / max(df$instals)
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat,
radius = 10, weight = 1,
opacity = opacities, fillOpacity = opacities)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat,
radius = sqrt(df$instals) / pi, weight = 1,
opacity = opacities, fillOpacity = opacities)
map
opacities <- df$instals / max(df$instals) / 5
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat,
radius = sqrt(df$instals) / pi, weight = 1,
opacity = opacities, fillOpacity = opacities)
map
View(post)
View(pv)
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
fillOpacity = df$instals / max(df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
opacity = 0.1
fillOpacity = df$instals / max(df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
opacity = 0.1,
fillOpacity = df$instals / max(df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
opacity = 0.2,
fillOpacity = df$instals / max(df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
opacity = 1,
fillOpacity = 1, radius = 0.01)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 10, opacity = 0.2,
fillOpacity = df$instals / max(df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 3, opacity = 0.2,
fillOpacity = df$instals / max(df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 10, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 10, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2,
popup = "test")
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2,
popup = paste0("Postcode: ", df$postcode), ", ", "Installations: ", df$instals)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2)
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2,
popup = paste0("Postcode: ", df$postcode, ", ", "Installations: ", df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2,
popup = paste0("Postcode: ", df$postcode, "\n", "Installations: ", df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2,
popup = paste0("Postcode: ", df$postcode, ", ", "Installations: ", df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals) / 2,
popup = paste0("Postcode: ", df$postcode, ", ", "Installations: ", df$instals))
map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = df$lng, lat = df$lat, weight = 1,
radius = 5, opacity = 0.2,
fillOpacity = df$instals / max(df$instals),
popup = paste0("Postcode: ", df$postcode, ", ", "Installations: ", df$instals))
map
