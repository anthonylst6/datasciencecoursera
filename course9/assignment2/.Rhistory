lm.fit26 <- lm(crim ~ zn, data = Boston)
?Boston
lm.fit26 <- lm(crim ~ zn, data = Boston)
lm.fit27 <- lm(crim ~ indus, data = Boston)
lm.fit28 <- lm(crim ~ factor(chas), data = Boston)
lm.fit29 <- lm(crim ~ nox, data = Boston)
lm.fit30 <- lm(crim ~ rm, data = Boston)
lm.fit31 <- lm(crim ~ age, data = Boston)
lm.fit32 <- lm(crim ~ dis, data = Boston)
lm.fit33 <- lm(crim ~ rad, data = Boston)
lm.fit34 <- lm(crim ~ tax, data = Boston)
lm.fit35 <- lm(crim ~ ptratio, data = Boston)
lm.fit36 <- lm(crim ~ black, data = Boston)
lm.fit37 <- lm(crim ~ lstat, data = Boston)
lm.fit38 <- lm(crim ~ medv, data = Boston)
coef(lm.fit26)
lm.fit26$coef
summary(lm.fit26)$coef
summary(lm.fit26)$coef
summary(lm.fit27)$coef
summary(lm.fit28)$coef
summary(lm.fit29)$coef
summary(lm.fit30)$coef
summary(lm.fit31)$coef
summary(lm.fit32)$coef
summary(lm.fit33)$coef
summary(lm.fit34)$coef
summary(lm.fit35)$coef
summary(lm.fit36)$coef
summary(lm.fit37)$coef
summary(lm.fit38)$coef
# All predictors except chas are statistically significant under simple linear regression
plot(Boston$crim, Boston$chas)
# All predictors except chas are statistically significant under simple linear regression
plot(Boston$chas, Boston$crim)
# All predictors except chas are statistically significant under simple linear regression
plot(Boston$zn, Boston$crim)
plot(Boston$indus, Boston$crim)
plot(Boston$chas, Boston$crim)
plot(Boston$nox, Boston$crim)
# All predictors except chas are statistically significant under simple linear regression
pairs(Boston)
plot(Boston$age, Boston$crim)
plot(Boston$dis, Boston$crim)
plot(Boston$rad, Boston$crim)
plot(Boston$tax, Boston$crim)
plot(Boston$ptratio, Boston$crim)
plot(Boston$black, Boston$crim)
plot(Boston$lstat, Boston$crim)
plot(Boston$medv, Boston$crim)
plot(lm.fit26)
par(mfrow = c(2, 2))
plot(lm.fit26)
plot(lm.fit26)
plot(lm.fit27)
plot(lm.fit28)
plot(lm.fit29)
plot(lm.fit30)
plot(lm.fit31)
plot(lm.fit32)
plot(lm.fit33)
plot(lm.fit34)
plot(lm.fit35)
plot(lm.fit36)
plot(lm.fit37)
plot(lm.fit38)
plot(lm.fit28)
lm.fit39 <- lm(crim ~ ., data = Boston)
summary(lm.fit39)
cor(Boston)
vif(lm.fit39)
library(cars)
library(Cars)
library(car)
vif(lm.fit39)
plot(0.1, 0.2)
mfrow = c(2, 2)
par(mfrow = c(1, 1))
size(Boston)
dim(Boston)
col(Boston)
dim(Boston)
ncol(Boston)
paste0("lm.fit", 2 + 1)
coef(lm.fit26)
coef(lm.fit26)[2]
coef("lm.fit26")
coef(get("lm.fit26"))
coef(get("lm.fit26"))[2]
coef(lm.fit39)
coef(lm.fit39)[2]
for(i in 1:(ncol(Boston) - 1)) {
name <- paste0("lm.fit", 25 + i)
coefx <- coef(get(name))[2]
coefy <- coef(lm.fit39)[i + 1]
plot(coefx, coefy)
}
name <- paste0("lm.fit", 25 + i)
for(i in 1:(ncol(Boston) - 1)) {
name <- paste0("lm.fit", 25 + i)
coefx <- coef(get(name))[2]
coefy <- coef(lm.fit39)[i + 1]
points(coefx, coefy)
}
coords <- numeric(0)
coords <- data.frame(x = numeric(0), y = numeric(0))
for(i in 1:(ncol(Boston) - 1)) {
name <- paste0("lm.fit", 25 + i)
coords$x[i] <- coef(get(name))[2]
coords$y[i] <- coef(lm.fit39)[i + 1]
}
coords
name <- paste0("lm.fit", 26)
coords$x[1] <- coef(get(name))[2]
coords$x[1] <- 1
m <- numeric(0)
m[1] <- 2
coefx = numeric(0)
coefy = numeric(0)
for(i in 1:(ncol(Boston) - 1)) {
name <- paste0("lm.fit", 25 + i)
coefx[i] <- coef(get(name))[2]
coefy[i] <- coef(lm.fit39)[i + 1]
}
plot(coefx, coefy)
str(Boston)
names(Bosotn)
names(Boston)
# Question 15d
names <- names(Boston)
summary(lm.fit39)$coef
# Question 15d
names <- names(Boston)[4]
coef(lm.fit)
coef(lm.fit39)
summary(lm.fit39)$coef[4]
summary(lm.fit39)$coef[1, 4]
# Question 15d
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("Coefficients for", var))
print(summary(model)$coef[i + 1, 4])
print("----------------")
}
clear("name")
rm("name")
rm("names")
# Question 15d
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("Coefficients for", var))
print(summary(model)$coef[i + 1, 4])
print("----------------")
}
var <- names(Boston)[1 + 1]
var <- names(Boston)[2 + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("p-value for", var))
# Question 15d
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("p-value for", var))
print(summary(model)$coef[i + 1, 4])
print("----------------")
}
var <- names(Boston)[1 + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
summary(model)
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
summary(model)
}
model$coefficients
summary(model)
rm("var")
for(i in 1:(length(names) - 1)) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
summary(model)
}
names(Boston)
names(Boston)[1]
(length(names) - 1)
# Question 15d
for(i in 1:13) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
print(paste("p-value for", var))
print(summary(model)$coef[i + 1, 2:4])
print("----------------")
}
for(i in 1:13) {
var <- names(Boston)[i + 1]
model <- lm(crim ~ poly(get(var), 3), data = Boston)
summary(model)
}
# Question 15d
lm.zn = lm(crim~poly(zn,3))
summary(lm.zn)
str(Boston)
# Question 15d
lm.zn = lm(crim ~ poly(zn, 3))
# Question 15d
attach(Boston)
lm.zn = lm(crim ~ poly(zn, 3))
lm.indus = lm(crim ~ poly(indus, 3))
lm.chas = lm(crim ~ poly(chas, 3))
lm.nox = lm(crim ~ poly(nox, 3))
lm.rm = lm(crim ~ poly(rm, 3))
lm.age = lm(crim ~ poly(age, 3))
lm.dis = lm(crim ~ poly(dis, 3))
lm.rad = lm(crim ~ poly(rad, 3))
lm.tax = lm(crim ~ poly(tax, 3))
lm.ptratio = lm(crim ~ poly(ptratio, 3))
lm.black = lm(crim ~ poly(black, 3))
lm.lstat = lm(crim ~ poly(lstat, 3))
lm.medv = lm(crim ~ poly(medv, 3))
summary(lm.zn)
summary(lm.zn)
summary(lm.indus)
summary(lm.chas)
summary(lm.nox)
summary(lm.rm)
summary(lm.age)
summary(lm.dis)
summary(lm.rad)
summary(lm.tax)
summary(lm.ptratio)
summary(lm.black)
summary(lm.lstat)
summary(lm.medv)
install.packages("installR")
install.packages("installr")
library(installr)
updateR()
shiny::runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp()
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp()
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
runApp('C:/Users/user/Desktop/jhudatascience/course9/myApp')
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
plot(M)
M
plot(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year")
plot(M)
M = gvisMotionChart(Fruits, idvar = "Fruit", timevar = "Date", chartid = "I_lovemy_fruit")
plot(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
plot(M)
plot(M)
print(M,"chart", file = "myfile")
pwd
printwd
getwd()
print(M,"chart")
plot(M)
order(c(1.1, 1.2, 1.3))
order(c(1.1, 1.5, 1.3))
order(c(1.1, 1.5, 1.3))[1:3]
print
show
colSums
lm
showMethods(mean)
showMethods("mean")
showS3methods("mean")
getS3method(mean)
?predict
?mean
?lm
?colSums
?show
?dgamma
?predict
?mean
?show
?predict
lm
colSums
show
predict
showMethods(show)
showMethods(lm)
showMethods(mean)
showMethods(predict)
methods(predict)
methods(mean)
methods(lm)
methods(colSums)
setwd("C:/Users/user/Desktop/jhudatascience/course9/assignment2")
setwd("C:/Users/user/Desktop/Research Grade")
powqctrim <- read.csv("PVpow_qc_trim_ACT.csv")
View(powqctrim)
setwd("C:/Users/user/Desktop/jhudatascience/course9/assignment2")
pv <- read.csv("lgas_41d2.csv")
View(pv)
seifa <- read.csv("ABS_SEIFA2016_LGA_19022020125819856 (seifa).csv")
View(seifa)
unique(seifa$SEIFAINDEXTYPE)
library(dplyr)
library(plotly)
names(seifa)
names(seifa)[2]
seifa <- seifa %>%
filter(SEIFA_MEASURE = "SCORE") %>%
select(lga_name = Local.Government.Areas...2016, SEIFAINDEXTYPE, Score = Value)
View(seifa)
seifa <- seifa %>%
filter(SEIFA_MEASURE == "SCORE") %>%
select(lga_name = Local.Government.Areas...2016, SEIFAINDEXTYPE, Score = Value)
library(tidyr)
seifa <- seifa %>%
pivot_wider(names_from = SEIFAINDEXTYPE, values_from = Score)
View(seifa)
pv <- pv %>%
select(lga_name, density_lga)
?merge
df <- merge(pv, seifa, by = "lga_name")
View(df)
df <- df %>%
pivot_longer(IEO:IRSD, names_to = "Index", values_to = "Score")
View(df)
pv <- read.csv("lgas_41d2.csv")
seifa <- read.csv("ABS_SEIFA2016_LGA_19022020125819856 (seifa).csv")
seifa <- seifa %>%
filter(SEIFA_MEASURE == "SCORE") %>%
select(lga_name = Local.Government.Areas...2016, SEIFAINDEXTYPE, Score = Value) %>%
pivot_wider(names_from = SEIFAINDEXTYPE, values_from = Score)
pv <- pv %>%
select(lga_name, density = density_lga)
df <- merge(pv, seifa, by = "lga_name") %>%
pivot_longer(IEO:IRSD, names_to = "Index", values_to = "Score")
View(df)
pv <- read.csv("lgas_41d2.csv")
seifa <- read.csv("ABS_SEIFA2016_LGA_19022020125819856 (seifa).csv")
seifa <- seifa %>%
filter(SEIFA_MEASURE == "SCORE") %>%
select(lga = Local.Government.Areas...2016, SEIFAINDEXTYPE, score = Value) %>%
pivot_wider(names_from = SEIFAINDEXTYPE, values_from = score)
pv <- pv %>%
select(lga = lga_name, density = density_lga)
df <- merge(pv, seifa, by = "lga_name") %>%
pivot_longer(IEO:IRSD, names_to = "index", values_to = "score")
df <- merge(pv, seifa, by = "lga") %>%
pivot_longer(IEO:IRSD, names_to = "index", values_to = "score")
View(df)
plot_ly(df, x = ~score, y = ~density, type = "scatter", color = ~index)
?plotly
str(df)
summary(df)
df <- df%>%
na.omit()
?plot_ly
plot_ly(df, x = ~score, y = ~density, type = "scatter", color = ~index, alpha = 0.5)
plot_ly(df, x = ~score, y = ~density, type = "scatter", color = ~index, alpha = 0.7)
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) + geom_point() + geom_smooth()
g
ggplotly(g)
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) + geom_point(alpha = 0.5) + geom_smooth()
ggplotly(g)
# Make plot
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(y ~ x, method = "loess")
# Make plot
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(method = "loess")
ggplotly(g)
# Load data
pv <- read.csv("lgas_41d2.csv")
seifa <- read.csv("ABS_SEIFA2016_LGA_19022020125819856 (seifa).csv")
# Create dataframe for plotting
seifa <- seifa %>%
filter(SEIFA_MEASURE == "SCORE") %>%
select(lga = Local.Government.Areas...2016, SEIFAINDEXTYPE, score = Value) %>%
pivot_wider(names_from = SEIFAINDEXTYPE, values_from = score)
pv <- pv %>%
select(lga = lga_name, density = density_lga)
df <- merge(pv, seifa, by = "lga") %>%
pivot_longer(IEO:IRSD, names_to = "index", values_to = "score") %>%
na.omit()
# Make plot
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(method = "loess")
ggplotly(g)
View(df)
?ggplotly
?ggplot
# Make plot
g <- ggplot(df, aes(n = lga, x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(method = "loess")
g
ggplotly(g)
# Make plot
g <- ggplot(df, aes(n = lga, x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(y ~ x, method = "loess")
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(method = "loess")
g
# Make plot
g <- ggplot(df, aes(n = lga, x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(y ~ x, method = "loess")
g
ggplotly(g)
# Make plot
g <- ggplot(df, aes(n = lga, x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(y ~ x, method = "loess")
# Make plot
g <- ggplot(df, aes(n = lga, x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(method = "loess")
g
# Make plot
g <- ggplot(df, aes(n = lga, x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(mapping = aes(x = score, y = density), method = "loess")
g
# Make plot
g <- ggplot(df, aes(n = lga, x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = y ~ x, method = "loess")
g
ggplotly(g)
# Make plot
g <- ggplot(df, aes(n = lga, x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = density ~ score, method = "loess")
g
# Make plot
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = density ~ score, method = "loess")
g
# Make plot
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = y ~ x, method = "loess")
g
# Make plot
g <- ggplot(df, aes(x = score, y = density, z = lga)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = y ~ x, method = "loess")
g
# Make plot
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = y ~ x, method = "loess")
ggplotly(g)
ggplotly(g, text = ~lga)
# Make plot
g <- ggplot(df, aes(x = score, y = density)) + facet_wrap(. ~ index) +
geom_point(aes(z = lga), alpha = 0.5) + geom_smooth(formula = y ~ x, method = "loess")
ggplotly(g)
# Make plot
g <- ggplot(df, aes(x = score, y = density, z = lga)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = y ~ x, method = "loess", inherit.aes = FALSE)
ggplotly(g)
# Make plot
g <- ggplot(df, aes(x = score, y = density, z = lga)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = density ~ score, method = "loess", inherit.aes = FALSE)
ggplotly(g)
# Make plot
g <- ggplot(df, aes(x = score, y = density, z = lga)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(formula = aes(y = density) ~ aes(x = score), method = "loess", inherit.aes = FALSE)
ggplotly(g)
# Make plot
g <- ggplot(df, aes(x = score, y = density, z = lga)) + facet_wrap(. ~ index) +
geom_point(alpha = 0.5) + geom_smooth(mapping = aes(x = score, y = density), formula = y ~ x, method = "loess", inherit.aes = FALSE)
ggplotly(g)
# Load data
pv <- read.csv("lgas_41d2.csv")
seifa <- read.csv("ABS_SEIFA2016_LGA_19022020125819856 (seifa).csv")
# Create dataframe for plotting
seifa <- seifa %>%
filter(SEIFA_MEASURE == "SCORE") %>%
select(LGA = Local.Government.Areas...2016, SEIFAINDEXTYPE, Score = Value) %>%
pivot_wider(names_from = SEIFAINDEXTYPE, values_from = Score)
pv <- pv %>%
select(LGA = lga_name, Density = density_lga)
df <- merge(pv, seifa, by = "LGA") %>%
pivot_longer(IEO:IRSD, names_to = "Index", values_to = "Score") %>%
na.omit()
# Make plot
g <- ggplot(df, aes(x = Score, y = Density, z = LGA)) + facet_wrap(. ~ Index) +
geom_point(alpha = 0.5) + geom_smooth(mapping = aes(x = Score, y = Density), formula = y ~ x, method = "loess", inherit.aes = FALSE)
ggplotly(g)
View(seifa)
