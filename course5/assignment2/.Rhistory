with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
model
abline(model, lwd = 2)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x, y)
z <- rnorm(100)
plot(x, z)
plot(x, y)
par(mar = c(2, 2, 2, 2))
plot(x, y)
?par
par(mar = c(4, 4, 2, 2))
plot(x, y)
plot(x, y, pch = 20)
plot(x, y, pch = 19)
plot(x, y, pch = 2)
plot(x, y, pch = 3)
plot(x, y, pch = 4)
example(points)
plot(x, y, pch = 20)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 20)
title("Scatterplot")
text(-2, -2, "label")
legend("topleft", legend = "Data")
legend("topleft", legend = "Data", pch = 20)
fit = lm(y ~ x)
abline(fit)
abline(fit, lwd = 3)
abline(fit, lwd = 3, col = "blue")
plot(x, y, xlab = "Weight", ylab = "Height", main = "Scatterplot", pch = 20)
legend("topright", legend = "Data", pch = 20)
fit <- lm(y ~ x)
abline(fit, lwd = 3, col = "red")
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par("mar")
par(mar = c(2, 2, 1, 1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow = c(1, 2))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mar = c(4, 4, 2, 2))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow = c(2, 2))
plot(x, y)
plot(x, z)
plot(z, x)
plot(y, x)
par(mfcol = c(2, 2))
plot(x, y)
plot(x, z)
plot(z, x)
plot(y, x)
par(mfrow = c(1, 1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
?gl
g <- gl(2, 50, labels = c("Male", "Female"))
str(g)
plot(x, y)
plot(x, y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
points(x[g == "Female"], y[g == "Female"], col = "blue", pch = 19)
library(swirl)
swirl()
head(caras)
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5, 1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[[:x.limits]]
p[[x.limits]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2, 1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?name <- function(variables) {
}
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0,3))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
shoMe(cols)
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes("displ", "hwy"))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(col = "pink", size = 4, alpha = 1/2)
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(03, 3))
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = displ, y = hwy, color = factor(year)))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
library(swirl)
swirl()
bye()
library(swirl)
delete_progress("anthonylst6", path = NULL)
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, bindwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut())
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth = (method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
ccutpoints
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3)+ facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3)+ facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?cyplot
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data - airquality, facets = . ~ Month)
str(airquality)
airquality$Month
qplot(Wind, Ozone, data - airquality, facets = . ~ Month)
?llines
?points
?text
par(mar = c(0, 0, 0, 0))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
dev.off()
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )}
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
graY(0.5)
gray(0.5)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0, 1, len = 10))
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
x <- rnorm(1000)
y <- rnorm(1000)
plot(x, y, pch = 19)
plot(x, y, col = rgb(0, 0, 0, 0.2), pch = 19)
library(swirl)
swirl()
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dimensions(sub1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[, 1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
mdist
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v[, 2])
mdist <- dist(sub1[, c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1)
)
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(0.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
setwd("C:/Users/user/Desktop/datasciencecoursera/course5/assignment2")
# Load libraries and files
library(data.table)
data <- fread("repdata_data_StormData.csv.bz2")
# Reshape data
data <- data %>% # rough initial cleaning before treating fatalities, injuries, crop damage and property damage separately
mutate(BGN_DATE = as.Date(str_extract(BGN_DATE, "^[^ ]+"), "%m/%d/%Y")) %>% # convert date strings to date format
select(BGN_DATE, EVTYPE, FATALITIES, INJURIES, CROPDMG, CROPDMGEXP, PROPDMG, PROPDMGEXP, REMARKS) %>% # select relevant columns
filter(year(BGN_DATE) >= 1996 & (FATALITIES != "0" | INJURIES != "0" | (CROPDMG != "0" & CROPDMGEXP != "") | (PROPDMG != "0" & PROPDMGEXP != ""))) %>% # select data from 1996 onwards, when there were 48 standardised event types
mutate(EVTYPE = toupper(EVTYPE)) %>% # convert event types to uppercase
mutate(EVTYPE = gsub("-", " ", EVTYPE)) %>% # convert hyphens to spaces
mutate(EVTYPE = gsub("^ +", "", EVTYPE)) %>% # remove spaces at beginning
mutate(EVTYPE = gsub("  +", " ", EVTYPE)) %>% # convert multiple spaces to single space
mutate(EVTYPE = gsub("IES$", "Y", EVTYPE)) %>% # convert plural ending with IES to singular
mutate(EVTYPE = gsub("S$", "", EVTYPE)) %>% # convert plural ending with S to singular
mutate(EVTYPE = gsub("COASTALSTORM", "COASTAL STORM", EVTYPE)) %>% # add missing spaces
mutate(EVTYPE = gsub("CSTL", "COASTAL", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("FLD", "FLOOD", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("FLOODING", "FLOOD", EVTYPE)) %>% # standardise synonyms
mutate(EVTYPE = gsub("HVY", "HEAVY", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("PRECIP$", "PRECIPITATION", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("SML", "SMALL", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("TSTM", "THUNDERSTORM", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("UNSEASONABLE", "UNSEASONABLY", EVTYPE)) %>% # standardise synonyms
mutate(EVTYPE = gsub("WINDCHILL", "WIND CHILL", EVTYPE)) %>% # change for consistency
mutate(EVTYPE = gsub("WINTRY", "WINTERY", EVTYPE)) %>% # change for consistency
mutate(EVTYPE = gsub("(.*)COAST(.*)", "COASTAL FLOOD", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^COLD(.*)", "COLD/WIND CHILL", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^EXTREME(.*)", "EXTREME COLD/WIND CHILL", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("(.*)FLASH(.*)", "FLASH FLOOD", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("(.*)SURF(.*)", "HIGH SURF", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^HIGH WIND(.*)", "HIGH WIND", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("(.*)HURRICANE(.*)|(.*)TYPHOON(.*)", "HURRICANE/TYPHOON", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^IC(.*)ROAD$", "FROST/FREEZE", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^THUNDERSTORM WIND(.*)", "THUNDERSTORM WIND", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^STORM SURGE(.*)", "STORM SURGE/TIDE", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^WIND(.*)", "STRONG WIND", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^WINTER WEATHER(.*)", "WINTER WEATHER", EVTYPE)) # group together differently named event types
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
# Reshape data
data <- data %>% # rough initial cleaning before treating fatalities, injuries, crop damage and property damage separately
mutate(BGN_DATE = as.Date(str_extract(BGN_DATE, "^[^ ]+"), "%m/%d/%Y")) %>% # convert date strings to date format
select(BGN_DATE, EVTYPE, FATALITIES, INJURIES, CROPDMG, CROPDMGEXP, PROPDMG, PROPDMGEXP, REMARKS) %>% # select relevant columns
filter(year(BGN_DATE) >= 1996 & (FATALITIES != "0" | INJURIES != "0" | (CROPDMG != "0" & CROPDMGEXP != "") | (PROPDMG != "0" & PROPDMGEXP != ""))) %>% # select data from 1996 onwards, when there were 48 standardised event types
mutate(EVTYPE = toupper(EVTYPE)) %>% # convert event types to uppercase
mutate(EVTYPE = gsub("-", " ", EVTYPE)) %>% # convert hyphens to spaces
mutate(EVTYPE = gsub("^ +", "", EVTYPE)) %>% # remove spaces at beginning
mutate(EVTYPE = gsub("  +", " ", EVTYPE)) %>% # convert multiple spaces to single space
mutate(EVTYPE = gsub("IES$", "Y", EVTYPE)) %>% # convert plural ending with IES to singular
mutate(EVTYPE = gsub("S$", "", EVTYPE)) %>% # convert plural ending with S to singular
mutate(EVTYPE = gsub("COASTALSTORM", "COASTAL STORM", EVTYPE)) %>% # add missing spaces
mutate(EVTYPE = gsub("CSTL", "COASTAL", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("FLD", "FLOOD", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("FLOODING", "FLOOD", EVTYPE)) %>% # standardise synonyms
mutate(EVTYPE = gsub("HVY", "HEAVY", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("PRECIP$", "PRECIPITATION", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("SML", "SMALL", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("TSTM", "THUNDERSTORM", EVTYPE)) %>% # extend out abbreviations
mutate(EVTYPE = gsub("UNSEASONABLE", "UNSEASONABLY", EVTYPE)) %>% # standardise synonyms
mutate(EVTYPE = gsub("WINDCHILL", "WIND CHILL", EVTYPE)) %>% # change for consistency
mutate(EVTYPE = gsub("WINTRY", "WINTERY", EVTYPE)) %>% # change for consistency
mutate(EVTYPE = gsub("(.*)COAST(.*)", "COASTAL FLOOD", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^COLD(.*)", "COLD/WIND CHILL", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^EXTREME(.*)", "EXTREME COLD/WIND CHILL", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("(.*)FLASH(.*)", "FLASH FLOOD", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("(.*)SURF(.*)", "HIGH SURF", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^HIGH WIND(.*)", "HIGH WIND", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("(.*)HURRICANE(.*)|(.*)TYPHOON(.*)", "HURRICANE/TYPHOON", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^IC(.*)ROAD$", "FROST/FREEZE", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^THUNDERSTORM WIND(.*)", "THUNDERSTORM WIND", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^STORM SURGE(.*)", "STORM SURGE/TIDE", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^WIND(.*)", "STRONG WIND", EVTYPE)) %>% # group together differently named event types
mutate(EVTYPE = gsub("^WINTER WEATHER(.*)", "WINTER WEATHER", EVTYPE)) # group together differently named event types
View(data)
R.version()
R.Version()
