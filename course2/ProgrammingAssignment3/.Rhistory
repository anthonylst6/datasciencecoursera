sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, repois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
?plot
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
data(mtcars)
play()
head(mtcars)
dim(mtcars)
str(mtcars)
summary(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd("C:/Users/user/Desktop/datasciencecoursera/course2/ProgrammingAssignment3")
("outcome-of-care-measures.csv", colClasses = "character")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
unique(data[, 7])
sort(unique(data[, 7]))
hospitals <- character(0)
states <- sort(unique(data[, 7]))
length(states)
states[1]
num <- 20
?data.frame
data.frame(c(1,2,3), c(4,5,6))
data.frame("hospital" =c(1,2,3), "state" = c(4,5,6))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
if(class(num) == "numeric" & num > nrow(data_state)) {
return(NA)
}
if(num == "best") {
num <- 1
}
if(num == "worst") {
num <- sum(!is.na(data_state[, 11]))
}
suppressWarnings(data_state[, 11] <- as.numeric(data_state[, 11]))
hospitals_ranked <- data_state[order(data_state[, 11], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[num]]
}
hospitals
m1 <- split(data, data[, 7])[["WY"]]
hospitals[1] <- "test"
hospitals[2] <- "test2
hospitals[2] <- "test2"
hospitals[2] <- "test2"
hospitals
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- character(0)
states <- sort(unique(data[, 7]))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
#if(class(num) == "numeric" & num > nrow(data_state)) {
#        return(NA)
#}
#if(num == "best") {
#        num <- 1
#}
#if(num == "worst") {
#        num <- sum(!is.na(data_state[, 11]))
#}
suppressWarnings(data_state[, 11] <- as.numeric(data_state[, 11]))
hospitals_ranked <- data_state[order(data_state[, 11], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[20]]
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- character(0)
states <- sort(unique(data[, 7]))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
#if(class(num) == "numeric" & num > nrow(data_state)) {
#        return(NA)
#}
#if(num == "best") {
#        num <- 1
#}
#if(num == "worst") {
#        num <- sum(!is.na(data_state[, 11]))
#}
suppressWarnings(data_state[, 11] <- as.numeric(data_state[, 11]))
hospitals_ranked <- data_state[order(data_state[, 11], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[5]]
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
source('~/.active-rstudio-document', echo=TRUE)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- character(0)
states <- sort(unique(data[, 7]))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
#if(class(num) == "numeric" & num > nrow(data_state)) {
#        return(NA)
#}
#if(num == "best") {
#        num <- 1
#}
#if(num == "worst") {
#        num <- sum(!is.na(data_state[, 11]))
#}
suppressWarnings(data_state[, 11] <- as.numeric(data_state[, 11]))
hospitals_ranked <- data_state[order(data_state[, 11], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[1]]
}
data.frame("hospital" = hospitals, "state" = states)
class(20)
?return
m <- 3
c(3,4,5)[m]
hospitals_ranked[NA]
hospitals_ranked[NULL]
hospitals_ranked["a"]
n <- character(0)
n <- hospitals_ranked["a"]
n <- character(0)
n[1] <- hospitals_ranked["a"]
n
class(n)
n[2] <- "A"
n
num <- 20
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- character(0)
states <- sort(unique(data[, 7]))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
if(class(num) == "numeric" & num > nrow(data_state)) {
num <- "subsettingrandomstringreturnsNA"
}
if(num == "best") {
num <- 1
}
if(num == "worst") {
num <- sum(!is.na(data_state[, 11]))
}
suppressWarnings(data_state[, 11] <- as.numeric(data_state[, 11]))
hospitals_ranked <- data_state[order(data_state[, 11], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[num]]
}
hospitals_ranked[[20]]
tapply(data, data[,7], nrow)
tapply(data, data[ ,7], nrow)
tapply(data, data[ ,7], ncol)
tapply(data, data[ ,7], length)
tapply(data, data[ ,7], dim)
x <- split(data, data[, 7])
class(x)
View(x)
tapply(data[, 11], data[, 7], length)
num <= 20
num <- 20
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- character(0)
states <- sort(unique(data[, 7]))
data_state <- split(data, data[, 7])[[states[1]]]
if(class(num) == "numeric" & num > nrow(data_state)) {
num <- "subsettingrandomstringreturnsNA"
}
if(num == "best") {
num <- 1
}
if(num == "worst") {
num <- sum(!is.na(data_state[, 11]))
}
suppressWarnings(data_state[, 11] <- as.numeric(data_state[, 11]))
hospitals_ranked <- data_state[order(data_state[, 11], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[num]]
hospitals[i] <- hospitals_ranked[["subsettingrandomstringreturnsNA]]
hospitals[i] <- hospitals_ranked[["subsettingrandomstringreturnsNA"]]
hospitals[i] <- hospitals_ranked[["a"]]
hospitals[i] <- hospitals_ranked[["2"]]
hospitals[i] <- hospitals_ranked[[NA]]
hospitals[i] <- hospitals_ranked[[1]]
hospitals[1] <- hospitals_ranked[[num]]
hospitals[1] <- hospitals_ranked[["a"]]
hospitals[1] <- hospitals_ranked[[1]]
hospitals[1] <- hospitals_ranked[[2]]
hospitals[1] <- hospitals_ranked[[3]]
hospitals[1] <- hospitals_ranked[[4]]
hospitals[1] <- hospitals_ranked[[5]]
hospitals[1] <- hospitals_ranked[[6]]
hospitals[1] <- hospitals_ranked[[7]]
hospitals[1] <- hospitals_ranked[[8]]
hospitals[1] <- hospitals_ranked[[9]]
hospitals[1] <- hospitals_ranked[[10]]
?next
num = 20
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- character(0)
states <- sort(unique(data[, 7]))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
if(class(num) == "numeric" & num > nrow(data_state)) {
hospitals[i] <- NA
next
}
if(num == "best") {
num <- 1
}
if(num == "worst") {
num <- sum(!is.na(data_state[, 11]))
}
suppressWarnings(data_state[, 11] <- as.numeric(data_state[, 11]))
hospitals_ranked <- data_state[order(data_state[, 11], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[num]]
}
data.frame("hospital" = hospitals, "state" = states)
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if(!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
if(outcome == "heart attack") x <- 11
if(outcome == "heart failure") x <- 17
if(outcome == "pneumonia") x <- 23
hospitals <- character(0)
states <- sort(unique(data[, 7]))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
if(class(num) == "numeric" & num > nrow(data_state)) {
hospitals[i] <- NA
next
}
if(num == "best") {
num <- 1
}
if(num == "worst") {
num <- sum(!is.na(data_state[, x]))
}
suppressWarnings(data_state[, x] <- as.numeric(data_state[, x]))
hospitals_ranked <- data_state[order(data_state[, x], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[num]]
}
data.frame("hospital" = hospitals, "state" = states)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
num <- "worst"
outcome <- "pneumonia"
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if(!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
if(outcome == "heart attack") x <- 11
if(outcome == "heart failure") x <- 17
if(outcome == "pneumonia") x <- 23
hospitals <- character(0)
states <- sort(unique(data[, 7]))
data_state <- split(data, data[, 7])[[states[1]]]
if(class(num) == "numeric" & num > nrow(data_state)) {
hospitals[i] <- NA
}
if(num == "best") {
num <- 1
}
if(num == "worst") {
num <- sum(!is.na(data_state[, x]))
}
suppressWarnings(data_state[, x] <- as.numeric(data_state[, x]))
hospitals_ranked <- data_state[order(data_state[, x], data_state[, 2]), 2]
hospitals[1] <- hospitals_ranked[[num]]
outcome <- "pneumonia"
num <- "worst"
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if(!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
if(outcome == "heart attack") x <- 11
if(outcome == "heart failure") x <- 17
if(outcome == "pneumonia") x <- 23
hospitals <- character(0)
states <- sort(unique(data[, 7]))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
if(class(num) == "numeric" & num > nrow(data_state)) {
hospitals[i] <- NA
next
}
if(num == "best") {
num <- 1
}
if(num == "worst") {
num <- sum(!is.na(data_state[, x]))
}
suppressWarnings(data_state[, x] <- as.numeric(data_state[, x]))
hospitals_ranked <- data_state[order(data_state[, x], data_state[, 2]), 2]
hospitals[i] <- hospitals_ranked[[num]]
}
tapply(data[, 23], data[, 7], length)
hospitals
hospitals_ranked
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if(!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
if(outcome == "heart attack") x <- 11
if(outcome == "heart failure") x <- 17
if(outcome == "pneumonia") x <- 23
hospitals <- character(0)
states <- sort(unique(data[, 7]))
for(i in 1:length(states)) {
data_state <- split(data, data[, 7])[[states[i]]]
suppressWarnings(data_state[, x] <- as.numeric(data_state[, x]))
hospitals_ranked <- data_state[order(data_state[, x], data_state[, 2]), 2]
if(class(num) == "numeric" & num > nrow(data_state)) {
hospitals[i] <- NA
next
}
if(num == "best") {
hospitals[i] <- hospitals_ranked[[1]]
next
}
if(num == "worst") {
hospitals[i] <- hospitals_ranked[[sum(!is.na(data_state[, x]))]]
next
}
hospitals[i] <- hospitals_ranked[[num]]
}
data.frame("hospital" = hospitals, "state" = states)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best <- function(state, outcome) {
# Read source data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Stop function and return error message for invalid state or outcome
if(!(state %in% data[, 7])) {
stop("invalid state")
}
if(!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
# Divide hospitals according to state
hospital_state <- split(data[, 2], data[, 7])
# Define function for getting index of minimum value
get_index <- function(a) {
which(a == min(a, na.rm = TRUE))
}
# Writing the best function for the heart attack outcome
if(outcome == "heart attack") {
# Convert data to numeric form
suppressWarnings(data[, 11] <- as.numeric(data[, 11]))
# Get index of minimum mortality rate in each state                }
heartattack_index <- tapply(data[, 11], data[, 7], get_index)
# Return name of hospital with lowest mortality rate
hospital_heartattack <- hospital_state[[state]][heartattack_index[[state]]]
print(hospital_heartattack)
}
# Doing the same as above for heart failure outcome
if(outcome == "heart failure") {
suppressWarnings(data[, 17] <- as.numeric(data[, 17]))
heartfailure_index <- tapply(data[, 17], data[, 7], get_index)
hospital_heartfailure <- hospital_state[[state]][heartfailure_index[[state]]]
print(hospital_heartfailure)
}
# Doing the same as above for pneumonia outcome
if(outcome == "pneumonia") {
suppressWarnings(data[, 23] <- as.numeric(data[, 23]))
pneumonia_index <- tapply(data[, 23], data[, 7], get_index)
hospital_pneumonia <- hospital_state[[state]][pneumonia_index[[state]]]
print(hospital_pneumonia)
}
}
rankhospital <- function(state, outcome, num = "best") {
# Read source data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Stop function and return error message for invalid state or outcome
if(!(state %in% data[, 7])) {
stop("invalid state")
}
if(!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
# Retrieve data corresponding to input state
data_state <- split(data, data[, 7])[[state]]
# Return NA if num is larger than number of hospitals, define "best"
if(class(num) == "numeric" & num > nrow(data_state)) {
return(NA)
}
if(num == "best") {
num <- 1
}
# Writing the rankhospital function for the heart attack outcome
if(outcome == "heart attack") {
# Convert data to numeric form
suppressWarnings(data_state[, 11] <- as.numeric(data_state[, 11]))
# Re-order dataframe by mortality rate and select hospital name column
hospitals_ranked <- data_state[order(data_state[, 11], data_state[, 2]), 2]
# Define "worst"
if(num == "worst") {
num <- sum(!is.na(data_state[, 11]))
}
# Return name of hospital with input rank
print(hospitals_ranked[[num]])
}
# Doing the same as above for heart failure outcome
if(outcome == "heart failure") {
suppressWarnings(data_state[, 17] <- as.numeric(data_state[, 17]))
hospitals_ranked <- data_state[order(data_state[, 17], data_state[, 2]), 2]
if(num == "worst") {
num <- sum(!is.na(data_state[, 17]))
}
print(hospitals_ranked[[num]])
}
# Doing the same as above for pneumonia outcome
if(outcome == "pneumonia") {
suppressWarnings(data_state[, 23] <- as.numeric(data_state[, 23]))
hospitals_ranked <- data_state[order(data_state[, 23], data_state[, 2]), 2]
if(num == "worst") {
num <- sum(!is.na(data_state[, 23]))
}
print(hospitals_ranked[[num]])
}
}
# This function takes two arguments (outcome and num) and returns a two-column dataframe
# containing the names of the hospital in each state with the given rank specified by num
# in having the lowest mortality rates for the input outcome
rankall <- function(outcome, num = "best") {
# Read source data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Stop function and return error message for invalid outcome
if(!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
# Define column numbers corresponding to each outcome
if(outcome == "heart attack") x <- 11
if(outcome == "heart failure") x <- 17
if(outcome == "pneumonia") x <- 23
# Initiate empty hospitals vector to append to and get name of states alphabetically
hospitals <- character(0)
states <- sort(unique(data[, 7]))
# Fill into hospitals vector the corresponding hospital name with given rank
for(i in 1:length(states)) {
# Rank hospitals in ascending order for each state in the loop
data_state <- split(data, data[, 7])[[states[i]]]
suppressWarnings(data_state[, x] <- as.numeric(data_state[, x]))
hospitals_ranked <- data_state[order(data_state[, x], data_state[, 2]), 2]
# Append name of ranked hospital to hospitals vector
if(class(num) == "numeric" & num > nrow(data_state)) {
hospitals[i] <- NA
next
}
if(num == "best") {
hospitals[i] <- hospitals_ranked[[1]]
next
}
if(num == "worst") {
hospitals[i] <- hospitals_ranked[[sum(!is.na(data_state[, x]))]]
next
}
hospitals[i] <- hospitals_ranked[[num]]
}
# Return data frame
data.frame("hospital" = hospitals, "state" = states)
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
q()
