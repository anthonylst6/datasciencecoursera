x
}
f(3)
}
f(2)
f <- function(mean) m <- mean
f(5)
f(mean)
f(3)
f <- function(mean) {
m <- mean
m
}
f(5)
?function
?mean
get <- function() x
get()
get(5)
get
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
makeVector(3)
makeVector()
makeVector$get
makeVector$get()
makeVector()$get()
makeVector()$get(5)
makeVector()$get()
makeVector(1)$get()
1 <- x
makeVector(1)$getmean()
makeVector(1:5)$getmean()
makeVector(1)$set(1:5)
makeVector(1)$get()
makeVector(1)
makeVector(1:5)
makeVector(1:5)$getmean()
makeVector(1:5)$get()
makeVector(1:5)$set()
makeVector(1:5)$set(5)
makeVector(1:5)$set(5)$get()
f <- function(x = numeric()) {
g <- function(x)
}
f <- function(x = numeric()) {
g <- function() x
}
f(1:5)
f <- function(x = numeric()) {
y <- 5
g <- function() y
}
f(1:5)
f <- function(x = numeric()) {
y <- 5
g <- function() y
g()
}
f(1:5)
f(1:3)
f <- function(x = numeric()) {
y <- x
g <- function() y
g()
}
f(1:3)
library
?"<<-"
f <- function(mean) {
mean + 4
}
f(5)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
myVector <- makeVector(15)
myVector
mean(myVector)
class(myVector)
class(myVector$set())
class(myVector$set)
class(myVector$get)
class(myVector$setmean)
class(myVector$getmean)
cachemean(myVector)
myVector <- makeVector(1:15)
class(myVector$set)
cachemean(myVector)
myVector$set(1:11)
mySecondVector <- myVector$set(1:11)
myVector$get()
myVector$set(1:15)
myVector$get()
myVector$getmean
myVector$getmean()
myVector$setmean(5)
myVector$getmean()
myVector$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1:100))
cachemean(makeVector(1:100))
x <- cachemean(makeVector(1:100))
x <- makeVector(1:100)
cachemean(x)
cachemean(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
myMatrix <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(myMatrix)
cacheSolve(myMatrix)
myMatrix$set(matrix(rep(1,4), 2, 2))
cacheSolve(myMatrix)
myMatrix$set(matrix(1:9, 3, 3))
cacheSolve(myMatrix)
myMatrix$set(matrix(c(1,3,2,4), 2, 2))
cacheSolve(myMatrix)
cacheSolve(myMatrix)
?str
str(str)
str(lm)
str(ls)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
?gl
f <- gl(40, 10)
str(f)
summary(f)
dim(summary(f))
class(summary(f))
summary(f)[5]
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10 , 10)
str(m)
m[, 1]
s <- split(airquality, airquality$Month)
str(s)
z <- rnorm(10)
z
z <- rnorm(10, 20, 2)
z
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10, 1)
rpois(10, 2)
rpois(10, 20)
ppois(2, 2)
ppois(4, 2)
ppois(6, 2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(10)
x <- binom(100, 1, 0.5)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
sumary(y)
summary(y)
plot(x, y)
set.seed(1)
x <- norm(100)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x, y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10)
sample(1:10, replace = TRUE)
system.time(1+1)
class(system.time(1+1))
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+")
}
?outer
x <- hilbert(1000)
system.time(svd(x))
system.time({
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
})
sample.interval=10000
lm(y ~ x)
Rprof()
sample.interval=10000
Rprof()
?lm
Rprof(sample.interval=10000)
?Rprof
?summaryRprof
?by.total
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
q()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, repois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
?plot
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
data(mtcars)
play()
head(mtcars)
dim(mtcars)
str(mtcars)
summary(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
install.packages("curl")
install.packages("RMySWL")
install.packages("RMySQL")
remove.packages("RMySQL")
installed.packages("RMySQL")
installed.packages()
check.packages("curl")
check.packages(curl)
R.home()
q()
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.soe.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.soe.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n = 10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
q()
d1 = date()
d1
class(d1)
d2 = Sys.Date()
class(d2)
format(d2, "%a %b %d")
x = c("1jan1960", "2jan1960", "31mar1960", "30jul1960"); z = as.Date(x, "%d%b%Y")
z
z[1] - z[2]
as.numeric(z[1] - z[2])
weekdays(d2)
months(d2)
julian(d2)
library(lubridate); ymd("20140108")
mdy("08/04/2013")
dmy("03-04-2013")
ymd_hms("2011-08-03 10:15:03")
ymd_hms("2011-08-03 10:15:03", tz = "Pacific/Auckland")
?Sys.timezone
x = dmy(c("1jan2013", "2jan2013", "31mar2013", "30jul2013"))
wday(x[1])
wday(x[1], label = TRUE)
?POSIXlt
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 4, minutes = 14)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(arrive, last_time)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("C:/Users/user/Desktop/datasciencecoursera/course3")
# Question 1
data <- read.csv("./data/communities.csv")
data <- read.csv("./data/communities.csv")
?strsplit
datanames_split <- strsplit(names(data), "wgtp")
datanames_split[123]
datanames_split[[123]]
data2 <- read.csv("./data/FGDP.csv", skip = 4)
data2 <- data2[1:190, c(1, 2, 4, 5)]
colnames(data2) <- c("CountryCode", "Rank", "Economy", "GDP")
data2$GDP <- as.numeric(gsub("," ,"", as.character(data2$GDP)))
mean(data2$GDP)
# Question 3
length(grep("^United", countryNames))
# Question 3
countryNames <- colnames$Economy
# Question 3
countryNames <- data2$Economy
length(grep("^United", countryNames))
data3 <- read.csv("./data/FEDSTATS_Country.csv")
data_merged <- merge(data2, data3, by.x = "CountryCode", by.y = "CountryCode")
View(data_merged)
length(grep("Fiscal year end: June", data_merged$Special.Notes))
# Question 5
library(quantmod)
install.packages("quantmod")
# Question 5
library(quantmod)
amzn = getSymbols("AMZN",auto.assign = FALSE)
sampleTimes = index(amzn)
class(sampleTimes)
head(sampleTimes)
length(grep("2012", sampleTimes))
wday(sampleTimes[1])
sum(wday(sampleTimes) == 2)
sum(wday(sampleTimes) == 2 & year(sampleTimes == 2012))
year(sampleTimes[1])
sum(wday(sampleTimes) == 2 & year(sampleTimes == 2012))
x <- year(sampleTimes)
table(x)
sum(wday(sampleTimes) == 2 & year(sampleTimes) == 2012)
sum(year(sampleTimes) == 2012)
